return(results)
}
call_models2 = function(data, model_name, model_function, variable, type = "default"){
#' Chamadas para Modelos de Previsão
#'
#' Esta função aplica um modelo de previsão a um conjunto de dados, utilizando uma janela deslizante para gerar previsões.
#'
#' @param data Um `data.frame` ou matriz contendo os dados a serem modelados.
#' @param model_name O nome do modelo a ser utilizado (apenas um rótulo).
#' @param model_function A função que implementa o modelo de previsão a ser aplicado.
#' @param variable O nome da variável dependente que será prevista.
#' @param type O tipo de dados. O padrão é "default".
#' @return Uma lista contendo os seguintes elementos:
#' - mae: O erro absoluto médio das previsões.
#' - rmse: A raiz do erro quadrático médio das previsões.
#' - forecasts: As previsões geradas pelo modelo para o horizonte definido.
#'
#' @examples
#' df <- data.frame(time = 1:100, variable = rnorm(100))
#' results <- call_models(data = df, model_name = "MyModel", model_function = my_model_function, variable = "variable")
#'
#' @export
data = as.matrix(data)
model_name <- model_name
model_function <- model_function
nwindows = round(nrow(data)*0.3)
y_out <- tail(data[, variable], nwindows)
#if (type == 'tb'){
#  data <- as.data.frame(data) %>%
#    select(-c(1)) %>%
#    as.matrix()
#}
model_list <- list()
for_ind <- c(1, 4)
for (i in for_ind) {
model <- expanding_window(
fn = model_function,
df = data,
nwindow = nwindows + i - 1,
horizon = i,
variable = variable,
n_lags = 4
)
model_list[[i]] <- model
cat(i, "\n")
}
forecasts <- Reduce(
f = cbind,
x = lapply(model_list, function(x) head(x$forecast, nwindows))
) %>% as.matrix()
for (i in for_ind) {
filename <- paste0("forecast ",model_name,"-horizon-" , i, ".png")
filepath <- file.path("Plots", filename)
png(filepath, width = 1000, height = 600)
col_idx <- match(i, for_ind)  # find which column corresponds to horizon i
plot.ts(y_out,
main = paste0("Forecast with ", model_name, " (horizon = ", i, ")"),
lwd = 2)
lines(forecasts[, col_idx], col = 2, lwd = 2)
dev.off()
}
rmse <- apply(forecasts, 2, f_rmse, y = y_out) %>% print()
mae = apply(forecasts, 2, f_mae, y = y_out) %>% print()
results = list(mae = mae, rmse = rmse, forecasts = forecasts)
return(results)
}
lasso_model <- call_models(dataset, 'LASSO', get_lasso, "pib_rs")
rolling_window <- function(fn, df, nwindow = 1, horizon, variable, ...) {
#' Janela Movel para Modelagem
#'
#' Esta função aplica uma função especificada a uma janela deslizante de dados em um `data.frame` para realizar previsões.
#'
#' @param fn A função a ser aplicada em cada janela deslizante. Esta função deve retornar um objeto com as previsões e saídas.
#' @param df Um `data.frame` contendo os dados a serem processados.
#' @param nwindow O tamanho da janela deslizante. O padrão é 1.
#' @param horizon O horizonte de previsão, que determina quantas observações devem ser projetadas para frente.
#' @param variable O nome da variável dependente a ser utilizada na análise.
#' @param ... Argumentos adicionais a serem passados para a função `fn`.
#' @return Uma lista com dois elementos:
#' - forecast: Um vetor com as previsões resultantes de cada aplicação da função nas janelas deslizantes.
#' - outputs: Uma lista contendo as saídas resultantes de cada aplicação da função nas janelas deslizantes.
#'
#' @examples
#' df <- data.frame(data = 1:100, variable = rnorm(100))
#' result <- rolling_window(fn = my_forecast_function, df = df, nwindow = 5, horizon = 1, variable = 'variable')
#'
#' @export
#ind <- seq_len(nrow(df))
window_size <- nrow(df) - nwindow
indmat <- matrix(NA, window_size, nwindow)
indmat[1, ] <- seq_len(ncol(indmat))
for (i in 2:nrow(indmat)) {
indmat[i, ] <- indmat[i - 1, ] + 1
}
rw <- apply(
X = indmat,
MARGIN = 2,
FUN = fn,
df = df,
horizon = horizon,
variable = variable,
...
)
forecast <- unlist(lapply(rw, function(x) x$forecast))
outputs <- lapply(rw, function(x) x$outputs)
return(list(forecast = forecast, outputs = outputs))
}
call_models = function(data, model_name, model_function, variable, type = "default"){
#' Chamadas para Modelos de Previsão
#'
#' Esta função aplica um modelo de previsão a um conjunto de dados, utilizando uma janela deslizante para gerar previsões.
#'
#' @param data Um `data.frame` ou matriz contendo os dados a serem modelados.
#' @param model_name O nome do modelo a ser utilizado (apenas um rótulo).
#' @param model_function A função que implementa o modelo de previsão a ser aplicado.
#' @param variable O nome da variável dependente que será prevista.
#' @param type O tipo de dados. O padrão é "default".
#' @return Uma lista contendo os seguintes elementos:
#' - mae: O erro absoluto médio das previsões.
#' - rmse: A raiz do erro quadrático médio das previsões.
#' - forecasts: As previsões geradas pelo modelo para o horizonte definido.
#'
#' @examples
#' df <- data.frame(time = 1:100, variable = rnorm(100))
#' results <- call_models(data = df, model_name = "MyModel", model_function = my_model_function, variable = "variable")
#'
#' @export
data = as.matrix(data)
model_name <- model_name
model_function <- model_function
nwindows = round(nrow(data)*0.3)
y_out <- tail(data[, variable], nwindows)
#if (type == 'tb'){
#  data <- as.data.frame(data) %>%
#    select(-c(1)) %>%
#    as.matrix()
#}
model_list <- list()
for_ind <- c(1, 4)
for (i in for_ind) {
model <- rolling_window(
fn = model_function,
df = data,
nwindow = nwindows + i - 1,
horizon = i,
variable = variable,
n_lags = 4
)
model_list[[i]] <- model
cat(i, "\n")
}
forecasts <- Reduce(
f = cbind,
x = lapply(model_list, function(x) head(x$forecast, nwindows))
) %>% as.matrix()
for (i in for_ind) {
filename <- paste0("forecast ",model_name,"-horizon-" , i, ".png")
filepath <- file.path("Plots", filename)
png(filepath, width = 1000, height = 600)
col_idx <- match(i, for_ind)  # find which column corresponds to horizon i
plot.ts(y_out,
main = paste0("Forecast with ", model_name, " (horizon = ", i, ")"),
lwd = 2)
lines(forecasts[, col_idx], col = 2, lwd = 2)
dev.off()
}
rmse <- apply(forecasts, 2, f_rmse, y = y_out) %>% print()
mae = apply(forecasts, 2, f_mae, y = y_out) %>% print()
results = list(mae = mae, rmse = rmse, forecasts = forecasts)
return(results)
}
lasso_model <- call_models(dataset, 'LASSO', get_lasso, "pib_rs")
lasso_model <- call_models1(dataset, 'LASSO - new RW', get_lasso, "pib_rs")
rolling_windowv2 <- function(fn, df, nwindow = 1, horizon, variable, ...) {
#' Janela Movel para Modelagem
#'
#' Esta função aplica uma função especificada a uma janela deslizante de dados em um `data.frame` para realizar previsões.
#'
#' @param fn A função a ser aplicada em cada janela deslizante. Esta função deve retornar um objeto com as previsões e saídas.
#' @param df Um `data.frame` contendo os dados a serem processados.
#' @param nwindow O tamanho da janela deslizante. O padrão é 1.
#' @param horizon O horizonte de previsão, que determina quantas observações devem ser projetadas para frente.
#' @param variable O nome da variável dependente a ser utilizada na análise.
#' @param ... Argumentos adicionais a serem passados para a função `fn`.
#' @return Uma lista com dois elementos:
#' - forecast: Um vetor com as previsões resultantes de cada aplicação da função nas janelas deslizantes.
#' - outputs: Uma lista contendo as saídas resultantes de cada aplicação da função nas janelas deslizantes.
#'
#' @examples
#' df <- data.frame(data = 1:100, variable = rnorm(100))
#' result <- rolling_window(fn = my_forecast_function, df = df, nwindow = 5, horizon = 1, variable = 'variable')
#'
#' @export
window_size <- nrow(df) - nwindow + 1
indmat <- matrix(NA, window_size, nwindow)
indmat[1, ] <- seq_len(ncol(indmat))
for (i in 2:nrow(indmat)) {
indmat[i, ] <- indmat[i - 1, ] + 1
}
rw <- apply(
X = indmat,
MARGIN = 1,
FUN = fn,
df = df,
horizon = horizon,
variable = variable,
...
)
forecast <- unlist(lapply(rw, function(x) x$forecast))
outputs <- lapply(rw, function(x) x$outputs)
return(list(forecast = forecast, outputs = outputs))
}
rolling_window <- function(fn, df, nwindow = 1, horizon, variable, ...) {
#' Janela Movel para Modelagem
#'
#' Esta função aplica uma função especificada a uma janela deslizante de dados em um `data.frame` para realizar previsões.
#'
#' @param fn A função a ser aplicada em cada janela deslizante. Esta função deve retornar um objeto com as previsões e saídas.
#' @param df Um `data.frame` contendo os dados a serem processados.
#' @param nwindow O tamanho da janela deslizante. O padrão é 1.
#' @param horizon O horizonte de previsão, que determina quantas observações devem ser projetadas para frente.
#' @param variable O nome da variável dependente a ser utilizada na análise.
#' @param ... Argumentos adicionais a serem passados para a função `fn`.
#' @return Uma lista com dois elementos:
#' - forecast: Um vetor com as previsões resultantes de cada aplicação da função nas janelas deslizantes.
#' - outputs: Uma lista contendo as saídas resultantes de cada aplicação da função nas janelas deslizantes.
#'
#' @examples
#' df <- data.frame(data = 1:100, variable = rnorm(100))
#' result <- rolling_window(fn = my_forecast_function, df = df, nwindow = 5, horizon = 1, variable = 'variable')
#'
#' @export
#ind <- seq_len(nrow(df))
window_size <- nrow(df) - nwindow
indmat <- matrix(NA, window_size, nwindow)
indmat[1, ] <- seq_len(ncol(indmat))
for (i in 2:nrow(indmat)) {
indmat[i, ] <- indmat[i - 1, ] + 1
}
rw <- apply(
X = indmat,
MARGIN = 2,
FUN = fn,
df = df,
horizon = horizon,
variable = variable,
...
)
forecast <- unlist(lapply(rw, function(x) x$forecast))
outputs <- lapply(rw, function(x) x$outputs)
return(list(forecast = forecast, outputs = outputs))
}
rolling_windowv2 <- function(fn, df, nwindow = 1, horizon, variable, ...) {
#' Janela Movel para Modelagem
#'
#' Esta função aplica uma função especificada a uma janela deslizante de dados em um `data.frame` para realizar previsões.
#'
#' @param fn A função a ser aplicada em cada janela deslizante. Esta função deve retornar um objeto com as previsões e saídas.
#' @param df Um `data.frame` contendo os dados a serem processados.
#' @param nwindow O tamanho da janela deslizante. O padrão é 1.
#' @param horizon O horizonte de previsão, que determina quantas observações devem ser projetadas para frente.
#' @param variable O nome da variável dependente a ser utilizada na análise.
#' @param ... Argumentos adicionais a serem passados para a função `fn`.
#' @return Uma lista com dois elementos:
#' - forecast: Um vetor com as previsões resultantes de cada aplicação da função nas janelas deslizantes.
#' - outputs: Uma lista contendo as saídas resultantes de cada aplicação da função nas janelas deslizantes.
#'
#' @examples
#' df <- data.frame(data = 1:100, variable = rnorm(100))
#' result <- rolling_window(fn = my_forecast_function, df = df, nwindow = 5, horizon = 1, variable = 'variable')
#'
#' @export
window_size <- nrow(df) - nwindow + 1
indmat <- matrix(NA, window_size, nwindow)
indmat[1, ] <- seq_len(ncol(indmat))
for (i in 2:nrow(indmat)) {
indmat[i, ] <- indmat[i - 1, ] + 1
}
rw <- apply(
X = indmat,
MARGIN = 1,
FUN = fn,
df = df,
horizon = horizon,
variable = variable,
...
)
forecast <- unlist(lapply(rw, function(x) x$forecast))
outputs <- lapply(rw, function(x) x$outputs)
return(list(forecast = forecast, outputs = outputs))
}
expanding_window <- function(fn, df, nwindow = 1, horizon, variable, ...) {
#' Janela Expansiva para Modelagem (expanding window)
#'
#' Versão mínima alterada para produzir janelas expansivas: cada janela começa
#' em 1 e cresce até o final, começando com tamanho `nwindow`.
# número de janelas (inclui a janela final que termina em nrow(df))
window_size <- nrow(df) - nwindow + 1
if (window_size < 1) stop("nwindow is larger than number of rows in df")
# lista de índices: 1:(nwindow), 1:(nwindow+1), ..., 1:(nrow(df))
indlist <- lapply(seq_len(window_size), function(i) seq_len(nwindow + i - 1))
# aplica fn a cada janela (cada elemento de indlist é passado como primeiro arg)
rw <- lapply(indlist, function(idx) fn(idx, df = df, horizon = horizon, variable = variable, ...))
forecast <- unlist(lapply(rw, function(x) x$forecast))
outputs <- lapply(rw, function(x) x$outputs)
return(list(forecast = forecast, outputs = outputs))
}
call_models = function(data, model_name, model_function, variable, type = "default"){
#' Chamadas para Modelos de Previsão
#'
#' Esta função aplica um modelo de previsão a um conjunto de dados, utilizando uma janela deslizante para gerar previsões.
#'
#' @param data Um `data.frame` ou matriz contendo os dados a serem modelados.
#' @param model_name O nome do modelo a ser utilizado (apenas um rótulo).
#' @param model_function A função que implementa o modelo de previsão a ser aplicado.
#' @param variable O nome da variável dependente que será prevista.
#' @param type O tipo de dados. O padrão é "default".
#' @return Uma lista contendo os seguintes elementos:
#' - mae: O erro absoluto médio das previsões.
#' - rmse: A raiz do erro quadrático médio das previsões.
#' - forecasts: As previsões geradas pelo modelo para o horizonte definido.
#'
#' @examples
#' df <- data.frame(time = 1:100, variable = rnorm(100))
#' results <- call_models(data = df, model_name = "MyModel", model_function = my_model_function, variable = "variable")
#'
#' @export
data = as.matrix(data)
model_name <- model_name
model_function <- model_function
nwindows = round(nrow(data)*0.3)
y_out <- tail(data[, variable], nwindows)
#if (type == 'tb'){
#  data <- as.data.frame(data) %>%
#    select(-c(1)) %>%
#    as.matrix()
#}
model_list <- list()
for_ind <- c(1, 4)
for (i in for_ind) {
model <- rolling_window(
fn = model_function,
df = data,
nwindow = nwindows + i - 1,
horizon = i,
variable = variable,
n_lags = 4
)
model_list[[i]] <- model
cat(i, "\n")
}
forecasts <- Reduce(
f = cbind,
x = lapply(model_list, function(x) head(x$forecast, nwindows))
) %>% as.matrix()
for (i in for_ind) {
filename <- paste0("forecast ",model_name,"-horizon-" , i, ".png")
filepath <- file.path("Plots", filename)
png(filepath, width = 1000, height = 600)
col_idx <- match(i, for_ind)  # find which column corresponds to horizon i
plot.ts(y_out,
main = paste0("Forecast with ", model_name, " (horizon = ", i, ")"),
lwd = 2)
lines(forecasts[, col_idx], col = 2, lwd = 2)
dev.off()
}
rmse <- apply(forecasts, 2, f_rmse, y = y_out) %>% print()
mae = apply(forecasts, 2, f_mae, y = y_out) %>% print()
results = list(mae = mae, rmse = rmse, forecasts = forecasts)
return(results)
}
call_models1 = function(data, model_name, model_function, variable, type = "default"){
#' Chamadas para Modelos de Previsão
#'
#' Esta função aplica um modelo de previsão a um conjunto de dados, utilizando uma janela deslizante para gerar previsões.
#'
#' @param data Um `data.frame` ou matriz contendo os dados a serem modelados.
#' @param model_name O nome do modelo a ser utilizado (apenas um rótulo).
#' @param model_function A função que implementa o modelo de previsão a ser aplicado.
#' @param variable O nome da variável dependente que será prevista.
#' @param type O tipo de dados. O padrão é "default".
#' @return Uma lista contendo os seguintes elementos:
#' - mae: O erro absoluto médio das previsões.
#' - rmse: A raiz do erro quadrático médio das previsões.
#' - forecasts: As previsões geradas pelo modelo para o horizonte definido.
#'
#' @examples
#' df <- data.frame(time = 1:100, variable = rnorm(100))
#' results <- call_models(data = df, model_name = "MyModel", model_function = my_model_function, variable = "variable")
#'
#' @export
data = as.matrix(data)
model_name <- model_name
model_function <- model_function
nwindows = round(nrow(data)*0.3)
y_out <- tail(data[, variable], nwindows)
#if (type == 'tb'){
#  data <- as.data.frame(data) %>%
#    select(-c(1)) %>%
#    as.matrix()
#}
model_list <- list()
for_ind <- c(1, 4)
for (i in for_ind) {
model <- rolling_windowv2(
fn = model_function,
df = data,
nwindow = nwindows + i - 1,
horizon = i,
variable = variable,
n_lags = 4
)
model_list[[i]] <- model
cat(i, "\n")
}
forecasts <- Reduce(
f = cbind,
x = lapply(model_list, function(x) head(x$forecast, nwindows))
) %>% as.matrix()
for (i in for_ind) {
filename <- paste0("forecast ",model_name,"-horizon-" , i, ".png")
filepath <- file.path("Plots", filename)
png(filepath, width = 1000, height = 600)
col_idx <- match(i, for_ind)  # find which column corresponds to horizon i
plot.ts(y_out,
main = paste0("Forecast with ", model_name, " (horizon = ", i, ")"),
lwd = 2)
lines(forecasts[, col_idx], col = 2, lwd = 2)
dev.off()
}
rmse <- apply(forecasts, 2, f_rmse, y = y_out) %>% print()
mae = apply(forecasts, 2, f_mae, y = y_out) %>% print()
results = list(mae = mae, rmse = rmse, forecasts = forecasts)
return(results)
}
call_models2 = function(data, model_name, model_function, variable, type = "default"){
#' Chamadas para Modelos de Previsão
#'
#' Esta função aplica um modelo de previsão a um conjunto de dados, utilizando uma janela deslizante para gerar previsões.
#'
#' @param data Um `data.frame` ou matriz contendo os dados a serem modelados.
#' @param model_name O nome do modelo a ser utilizado (apenas um rótulo).
#' @param model_function A função que implementa o modelo de previsão a ser aplicado.
#' @param variable O nome da variável dependente que será prevista.
#' @param type O tipo de dados. O padrão é "default".
#' @return Uma lista contendo os seguintes elementos:
#' - mae: O erro absoluto médio das previsões.
#' - rmse: A raiz do erro quadrático médio das previsões.
#' - forecasts: As previsões geradas pelo modelo para o horizonte definido.
#'
#' @examples
#' df <- data.frame(time = 1:100, variable = rnorm(100))
#' results <- call_models(data = df, model_name = "MyModel", model_function = my_model_function, variable = "variable")
#'
#' @export
data = as.matrix(data)
model_name <- model_name
model_function <- model_function
nwindows = round(nrow(data)*0.3)
y_out <- tail(data[, variable], nwindows)
#if (type == 'tb'){
#  data <- as.data.frame(data) %>%
#    select(-c(1)) %>%
#    as.matrix()
#}
model_list <- list()
for_ind <- c(1, 4)
for (i in for_ind) {
model <- expanding_window(
fn = model_function,
df = data,
nwindow = nwindows + i - 1,
horizon = i,
variable = variable,
n_lags = 4
)
model_list[[i]] <- model
cat(i, "\n")
}
forecasts <- Reduce(
f = cbind,
x = lapply(model_list, function(x) head(x$forecast, nwindows))
) %>% as.matrix()
for (i in for_ind) {
filename <- paste0("forecast ",model_name,"-horizon-" , i, ".png")
filepath <- file.path("Plots", filename)
png(filepath, width = 1000, height = 600)
col_idx <- match(i, for_ind)  # find which column corresponds to horizon i
plot.ts(y_out,
main = paste0("Forecast with ", model_name, " (horizon = ", i, ")"),
lwd = 2)
lines(forecasts[, col_idx], col = 2, lwd = 2)
dev.off()
}
rmse <- apply(forecasts, 2, f_rmse, y = y_out) %>% print()
mae = apply(forecasts, 2, f_mae, y = y_out) %>% print()
results = list(mae = mae, rmse = rmse, forecasts = forecasts)
return(results)
}
lasso_model <- call_models(dataset, 'LASSO', get_lasso, "pib_rs")
lasso_model <- call_models1(dataset, 'LASSO - new RW', get_lasso, "pib_rs")
benchmark <- call_models(dataset, 'SARIMA', get_sarima, "pib_rs")
bench_newRW <- call_models1(dataset, 'SARIMA, rw v2', get_sarima, "pib_rs")
lasso_model <- call_models(dataset, 'LASSO', get_lasso, "pib_rs")
lasso_newRW <- call_models1(dataset, 'LASSO - new RW', get_lasso, "pib_rs")
#New rolling window
enet_model <- call_models(dataset, 'Elastic Net - new RW', get_elasticnet, "pib_rs")
enet_model <- call_models(dataset, 'Elastic Net', get_elasticnet, "pib_rs")
# h=1 RMSE: 0.05440103; MAE: 0.04112094
# h=4 RMSE: 0.05253469; MAE: 0.03919072
enet_model <- call_models1(dataset, 'Elastic Net - new RW', get_elasticnet, "pib_rs")
enet_model <- call_models2(dataset, 'Elastic Net - exp window', get_elasticnet, "pib_rs")
